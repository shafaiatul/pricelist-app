MEAN App (pricelist-app): All the dependecies installation:
------------------------------------------------------------
$npm install express //now I can use the functions and commands from express module

I want to use index.html file as the template fro my App. I need to use the express command 
where to look for this index.html file. So lets use:

app.use(express.static
//static is basically html css js and image files. Local would be __dirname + '/public'
//I am telling the server to look for the static file.( static files dont change dynamically
as I use the app)

PART 2:
-------
step 21:(GETTING DATA FROM A CONTROLLER):
-----------------------------------------
Create dummy data to populate and test our table. I will replace these data 
with data from mongoDB.
note: $scope is the glue between controller and view.



step 23:(GETTING DATA FROM the SERVER):
------------------------------------
transition to getting dummy data from the server instead. Lets use 'get' request to retrieve 
dummy data from the server instead from the 'controller'.

to do this I will use $http.get from the controller side, which will send the request to the server 
I will use app.get from the server side(server.js), which will respond by setting back the data I want.
'/contactlist' is the route I am going to create to get the data from. -----$http.get('/contactlist') in controller.js
And in server.js file underneath the app.use: using same route
app.get('/cantactlist', function (req, res) {
	console.log("I received a GET request")
	//lets copy the dummy data from controller file to the server file including the variable line not the $scope line(erase the $scope line, dont need that)
	
	person1 = {
		name : 'Shafaiatul Islam',
		email : 'shafaiatul@gmail.com',
		number : '1' 
	}
	person2 = {
		name : 'Tahidul Hossain',
		email : 'tahidul@gmail.com',
		number : '2' 
	}
	person3 = {
		name : 'MD Chowdhury',
		email : 'jessan@gmail.com',
		number : '3' 
	}
	var contactlist = [person1, person2, person3];
		res.json(contactlist); //bascially it going to respond to the GET request by sending back the contactlist data in JSON format which the controller can then use.
});
//now lets go back to controller.js and tell the $http.get what to do when receive back these data:

$http.get('/contactlist').success(function (response) {
		console.log('I got the data I requested');
		$scope.contactlist = response; // 'response' is what I received from the data. This line of code will put the data in index.html
});


Go to path where you located the bin folder----C:\Program Files\MongoDB\Server\3.0\bin
open up a console.
go to the path. then 
>mongo
>use pricelist 
(switched to db procelist)
>db.pricelist.insert({name : 'Shafat', email : 'shafat@gmail.com'}) //to insert something to database
>db.pricelist.find()
>db.pricelist.find().pretty() //to see it in nice format
//to insert more than one record
db.pricelist.insert ([{ name : 'Shadfat', email : 'sasdast@gmail.com'}, { name : 'Sfat', email : 'shsadasdt@gmail.com'}, { name : 'fat', email : 'ssafssdfat@gmail.com'}])


PART 4:
-----------
NOw I will do the GET and POST request:
----------------------------------------
Step 27: 
--------
Now I will use server to actually interact with MongoDB database which basically the restful part of the Application. 
>npm install mongojs

step 28:
--------
require the mongojs module in my server.js file
var mongojs = require('mongojs');
var db = mongojs('pricelist', ['pricelist']) //which mangoDB database or collection I will be using 


step 29: 
--------
Get my data from database using GET request. (now delete all the dummy data)

app.get('/pricelist', function (req, res) {
		console.log("Received a GET request ");
		//lets have the server find the data from the 'pricelist' database
		db.pricelist.find(function (err, docs) { //'docs' means it will respond with the pricelist document from the database 
			console.log(docs); //to make sure I receive the data from database
			res.json(docs); //sends the data back to the 'controller'
		});

	
});

Step 30:
---------
Lets add 3 input boxes just above the existing table row for product name, product price and quantity/size

Step 31: 
--------
I will define and test "addProduct()" function:
-----------------------------------------------
onclick addproduct() function will send data from the input boxes to the server to POST/add data to the MongoDB database
So now in my controller.js file underneath the $http.get section:

$scope.addProduct = function () {
		console.log($scope.product); //this is going to send to the console the info in the input boxes
}

Step 32:
--------
Now I will send the input data to server so that its received correctly

$http.post('/pricelist',$scope.product) //$scope.product is the data I am sending to the server
NOW lets write the code that server listen in server.js file

app.post('/pricelist', function(req, res) {
	console.log(req.body);	
}); 

listen for the post request from the controller. Console log will print the data receive to the terminal
This code wont workout bcos req.body : I am actually rquesting data from body of the input data. Our server doesn't 
know how to 'parse' the body yet.
To teach your server how parse the data from the input body. I need to install another module called body parser
>npm install body-parser
Now the app require the body-parser module
var bodyParser = require('body-parser');
app.use(bodyParser.json());//Now the server parse the data from the body input field

Step 33: 
--------
Now I am going to insert the input data to MongoDB database, now I wanna be able to 'insert' the data from user input to the mongoDB. to do this
lets write this code underneath the console.log(req.body); line

db.pricelist.insert(req.body, function (err, doc) { //req.body -> what we received and parsed.  doc ->represents the items we parsed and received. 
	res.json(doc);//we are going to respond with the json format with this doc here, so we gonna send back these data to the controller.
});


Step 34: 
--------
To test that the controller received a new data from the database
Now the controller received the new data from the database, lets test it underneath the '$http.post' 

$http.post('/pricelist', $scope.product).success(function (response) {//'$scope.product' is the data I am sending to the server
			console.log(response);
}); 


//NOW SUCCESSFULLY INSERTED THE DATA TO THE DATABASE
////////ONE problem/////////////
The data doesn't get updated on the browser, it doesn't refresh the browser to appear. //////////////////

Step 35:
--------
I want to automatically refresh the page when "Add Product" button is clicked:

NOw creating a new function called refresh, which when called we perform new get request for all of our pricelist data in the mongoDB database


Step 36:
-----------
Lets add remove button next to the products. 
<td><button class = "btn btn-danger" ng-click = "remove(product._id)"></button></td> //the unique _id is from the mongoDB, it will identify which product i want to remove

Step 37:
---------
We are gonna define and test the "remove()" function
In our controller.js file lets define and test the remove() function 'underneath' the addProduct() function

$scope.remove = function (id) {
		console.log(id);
};

Step 38: 
--------
Lets send $http.delete request to the server and lets test it to make sure the request is received. 
$http.delete('/pricelist/' + id) //the idea of the function is send the URL of the 'id' I want to delete. 

Now in server.js file underneath the app.post function 

app.delete('/pricelist/:id', function (req, res) { //:id because id is not part of the string
	var id = req.params.id //this basically get the value of the id from the URL
	console.log(id);
});

Step 39: 
---------
Lets now delete the product from mongoDB database:
$scope.remove = function (id) {
		console.log(id);
		$http.delete('/pricelist/' + id).success(function (response) {//the idea of the function is send the URL of the 'id' I want to delete. 
			
		refresh();
	});
};

Step 40: 
----------
I am now going to define the edit() function, which will select the product I wanna edit and put it into the input boxes. 
To do this, I am going to use a GET request for the specific product I wanna edit, so in controller.js file write the code underneath the 
$scope.remove function.

Step 41: 
----------
I am now going to define the update() function

$scope.update = function () {
		console.log($scope.product._id); //this will put the id of the product in the input boxes into the console, same id them click the update button
			
};

Step 42: 
--------
Now I am going use a PUT request to send the data to the server to be updated


$scope.update = function () {
		console.log($scope.product._id); //this will put the id of the product in the input boxes into the console, same id is produced when click the update button
		//Now I am going use a PUT request to send the data to the server to be updated
		$http.put('/pricelist/' + $scope.product._id) //thats the url of the product in the box

};



in server.js: lot of code for update: gotta pay attension:
-----------------------------------------------------------
db.pricelist.findAndModify({ query: {_id: mongojs.ObjectId(id)}, //this selects the product I wanna modify
		db.pricelist.findAndModify({ query: {_id: mongojs.ObjectId(id)}, 
		update : {$set: {productname : req.body.productname, price : req.body.price, size : req.body.size }},//this is the update I want to set for the product I selected 
		new : true}, function (err, doc) {
			res.json(doc);
		};
	})


Step 43:
----------
Now there is a bug in the code when I edit a product, instead of update if I add contact, it will render in the page but when I will go back to edit the 
product again, it will take the first product I chose in the first place. 

Solution: Lets add a new button CLEAR button next to the Add Contact button. 
---------------------------------------------------------------------------
I am not adding a new column i'm just adding a new button. 


Step 44:
------------
Lets define the deselect() function underneath the $scope.update function 

Before that lets remove the glitched product from the database going to console:
>cd (path: mondoDB path) which is C:\Program Files\MongoDB\Server\3.0\bin
>use pricelist
>db.pricelist.find()
>db.pricelist.remove({productname : 'Alcohol Pad'})
(item removed : 1)
Successfully removed the glitch.
--------------------------------

$scope.deselect = function () {
	$scope.product = ''; //clear the product input field while adding or editing product
};














